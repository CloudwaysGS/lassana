security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      lazy: true
      provider: app_user_provider
      custom_authenticator: App\Security\LoginFormAuthenticator
      logout:
        path: app_logout
        # where to redirect after logout
        # target: login
      access_denied_handler: App\Security\AccessDeniedHandler

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/accueil$, roles: [ROLE_GESTION_STOCK,ROLE_VENDEUR] }
    - { path: ^/produit/liste$, roles: [ROLE_GESTION_STOCK,ROLE_VENDEUR,ROLE_USER] }
    - { path: ^/entree/liste$, roles: [ROLE_GESTION_STOCK,ROLE_VENDEUR] }
    - { path: ^/sortie/liste$, roles: [ROLE_GESTION_STOCK,ROLE_VENDEUR] }
    - { path: ^/user/detail$, roles: ROLE_GESTION_STOCK }
    - { path: ^/facture$, roles: [ROLE_GESTION_STOCK,ROLE_VENDEUR] }
    - { path: ^/facture2$, roles: [ROLE_GESTION_STOCK,ROLE_VENDEUR] }
    - { path: ^/chargement$, roles: [ROLE_GESTION_STOCK,ROLE_VENDEUR] }
    - { path: ^/chargement/extraire$, roles: [ROLE_GESTION_STOCK,ROLE_VENDEUR] }
    - { path: ^/chargement/pdf$, roles: [ROLE_GESTION_STOCK,ROLE_VENDEUR] }
    - { path: ^/dette, roles: [ROLE_GESTION_STOCK,ROLE_VENDEUR] }
    - { path: ^/paiement, roles: [ROLE_GESTION_STOCK,ROLE_VENDEUR] }
    - { path: ^/client, roles: [ROLE_GESTION_STOCK,ROLE_VENDEUR] }
    - { path: ^/fournisseur, roles: [ROLE_GESTION_STOCK] }
    - { path: ^/user, roles: [ROLE_GESTION_STOCK] }
    - { path: ^/depot, roles: [ROLE_GESTION_STOCK,ROLE_VENDEUR] }
    - { path: ^/depot/new, roles: [ROLE_GESTION_STOCK,ROLE_VENDEUR] }
    - { path: ^/entree/depot, roles: [ROLE_GESTION_STOCK,ROLE_VENDEUR] }
    - { path: ^/entree/depot/new, roles: [ROLE_GESTION_STOCK,ROLE_VENDEUR] }
    - { path: ^/sortie/depot, roles: [ROLE_GESTION_STOCK,ROLE_VENDEUR] }
    - { path: ^/sortie/depot/new, roles: [ROLE_GESTION_STOCK,ROLE_VENDEUR] }
    #- { path: ^/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon